(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (204) ("LPD3-UTILS" si::select-package lpd3-utils::%build-compose ext::location (defun lpd3-utils::%build-compose) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/lpd3-utils/24-miscellany.lisp" . 94) ext::annotate :lambda-list (lpd3-utils::fns) lpd3-utils::fns gensym lpd3-utils::g lambda lpd3-utils::%rbuild #Y(lpd3-utils::rec nil nil (24 45 9 26 10 0 39 22 10 0 4 12 19 1 13 12 10 0 5 12 32 1 18 1 6 2 73 38 4 10 2 73 29) #1# #2# 94) #Y(lpd3-utils::%build-compose nil nil (24 45 9 26 19 0 10 45 11 15 12 10 0 6 1 12 31 1 14 13 2 32 0 18 1 43 1 6 3 73 43 1 29) #1# #2# 94) si::fset function "Helper fn for build-fn" si::set-documentation lpd3-utils::%build-call (defun lpd3-utils::%build-call) (#2# . 387) (lpd3-utils::op lpd3-utils::fns) lpd3-utils::op lpd3-utils::f #Y(nil nil nil (24 45 25 26 13 0 19 1 13 12 10 1 6 2 73 29) #1# #2# 387) mapcar #Y(lpd3-utils::%build-call nil nil (24 45 24 24 45 9 26 19 0 10 45 11 15 12 10 0 6 1 12 13 2 34 26 12 13 1 19 2 27 7 2 6 3 73 43 1 29) #1# #2# 387) "Helper fn for build-fn." (defun lpd3-utils::%rbuild) (#2# . 599) (lpd3-utils::expr) lpd3-utils::expr atom eq lpd3-utils::compose #Y(lpd3-utils::%rbuild nil nil (24 45 33 26 10 0 16 34 40 9 10 0 4 12 1 12 17 35 39 6 10 0 73 38 31 10 0 4 12 1 36 17 35 39 10 10 0 5 12 19 1 2 38 12 10 0 4 12 10 0 5 12 19 2 20 29) #1# #2# 599) "Helper function for build-fn." lpd3-utils::build-fn (defmacro lpd3-utils::build-fn) (#2# . 846) (lpd3-utils::expr) #:g587 #:g586 #:g588 si::dm-too-few-arguments si::dm-too-many-arguments #Y(lpd3-utils::build-fn nil nil (24 45 43 24 45 44 26 10 1 5 45 45 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 33 10 1 39 6 13 3 19 1 47 15 17 13 0 19 1 13 6 2 73 29) #1# #2# 846) t "General function builder. Takes an 
  expression containing an operation
  to perform on the other args, which 
  could be functions. Alternatively, the
  first element could be 'compose, in which
  case, a composition of the supplied 
  functions is returned." lpd3-utils::abbrev (defmacro lpd3-utils::abbrev) (#2# . 1160) (lpd3-utils::short lpd3-utils::long) #:g590 #:g589 #:g591 lpd3-utils::short lpd3-utils::long defmacro (&rest lpd3-utils::args) list* quote lpd3-utils::args #Y(lpd3-utils::abbrev nil nil (24 45 55 24 45 56 26 10 1 5 45 57 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 58 10 1 76 39 6 13 3 19 1 46 10 1 4 12 10 1 5 51 1 22 45 59 10 2 39 6 13 4 19 1 47 15 60 13 1 15 61 15 62 15 63 10 0 6 2 12 1 64 6 3 6 4 73 29) #1# #2# 1160) "Given two symbols, the second already
  interned and assigned to an operator, 
  grants the first symbol the same 
  functionality (mostly) as the second.
  Note that the abbreviation will be 
  bound to a macro, and thus cannot be
  directly passed as an argument." lpd3-utils::abbrevs (defmacro lpd3-utils::abbrevs) (#2# . 1519) (&rest lpd3-utils::names) #:g593 #:g592 #:g594 lpd3-utils::names progn lpd3-utils::pair #Y(nil nil nil (24 45 76 26 15 51 10 0 7 2 73 29) #1# #2# 1519) lpd3-utils::batches #Y(lpd3-utils::abbrevs nil nil (24 45 71 24 45 72 26 10 1 5 45 73 10 0 45 74 15 75 1 77 12 13 0 9 2 19 2 78 12 19 2 27 7 2 73 29) #1# #2# 1519) "Given an even number of symbols, 
  with those at the zero-based 1st, 3rd, 
  etc. positions assigned to operators, 
  assign macros to the 0th, 2nd, etc 
  symbols to match the operator of the
  second. Abbreviations are macros and 
  cannot be passed as args." identity lpd3-utils::*cont* lpd3-utils::=lambda (defmacro lpd3-utils::=lambda) (#2# . 2670) (lpd3-utils::parms &body lpd3-utils::body) #:g596 #:g595 #:g597 lpd3-utils::parms lpd3-utils::body #Y(lpd3-utils::=lambda nil nil (24 45 87 24 45 88 26 10 1 5 45 89 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 90 10 1 45 91 15 17 15 12 15 82 10 1 7 2 12 10 0 7 3 6 2 73 29) #1# #2# 2670) "Use this instead of lambda when 
  creating anonymous functions that
  are continuations." lpd3-utils::=defun (defmacro lpd3-utils::=defun) (#2# . 2841) (lpd3-utils::name lpd3-utils::parms &body lpd3-utils::body) #:g599 #:g598 #:g600 lpd3-utils::name string "=" symbol-name concatenate intern list (quote lpd3-utils::*cont*) defun #Y(lpd3-utils::=defun nil nil (24 45 98 24 45 99 26 10 1 5 45 100 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 101 10 1 76 39 6 13 3 19 1 46 10 1 4 12 10 1 5 51 1 22 45 90 10 2 45 91 15 102 15 103 10 2 16 104 12 19 3 105 12 19 1 106 45 25 15 75 15 60 13 3 13 2 15 107 15 63 10 0 6 2 12 15 108 10 2 7 4 6 4 12 15 109 13 0 15 82 10 2 7 2 12 10 1 7 4 6 3 73 43 1 29) #1# #2# 2841) "use this instead of defun when defining
  new functions that employ continuations.
  All functions so defined must end in a 
  call to =values, or to another function
  that ends in a call to =values. Only
  required parameters are accepted." lpd3-utils::=bind (defmacro lpd3-utils::=bind) (#2# . 3360) (lpd3-utils::parms lpd3-utils::expr &body lpd3-utils::body) #:g602 #:g601 #:g603 let #Y(lpd3-utils::=bind nil nil (24 45 116 24 45 117 26 10 1 5 45 118 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 90 10 1 76 39 6 13 3 19 1 46 10 1 4 12 10 1 5 51 1 22 45 33 10 2 45 91 15 119 15 82 15 17 15 12 13 2 10 0 7 3 6 2 6 2 6 1 12 10 1 6 3 73 29) #1# #2# 3360) "``Receives'' values from =values. Like
   multiple-value-bind, it can receive 
   multiple values, however, it cannot
   return multiple values to toplevel." lpd3-utils::=values (defmacro lpd3-utils::=values) (#2# . 3621) (&rest lpd3-utils::retvals) #:g605 #:g604 #:g606 lpd3-utils::retvals funcall #Y(lpd3-utils::=values nil nil (24 45 126 24 45 127 26 10 1 5 45 128 10 0 45 129 15 130 15 82 10 0 7 3 73 29) #1# #2# 3621) "Used to return a value or values at the
  end of a function defined with =defun." lpd3-utils::=funcall (defmacro lpd3-utils::=funcall) (#2# . 3778) (lpd3-utils::fn &rest lpd3-utils::args) #:g608 #:g607 #:g609 lpd3-utils::fn #Y(lpd3-utils::=funcall nil nil (24 45 137 24 45 138 26 10 1 5 45 139 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 140 10 1 45 64 15 130 13 1 15 82 10 0 7 4 73 29) #1# #2# 3778) "Use this rather than funcall when 
  invoking passed functions in continuations." lpd3-utils::=apply (defmacro lpd3-utils::=apply) (#2# . 3931) (lpd3-utils::fn &rest lpd3-utils::args) #:g611 #:g610 #:g612 apply #Y(lpd3-utils::=apply nil nil (24 45 147 24 45 148 26 10 1 5 45 149 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 140 10 1 45 64 15 150 13 1 15 82 10 0 7 4 73 29) #1# #2# 3931) "Use this rather than apply when invoking
  a function defined with =defun on 
  args contained in lists." lpd3-utils::*paths* si::*make-special variable "As yet unexplored computational paths." (defparameter lpd3-utils::*paths*) (#2# . 4104) lpd3-utils::+failsym+ lpd3-utils::@ si::*make-constant "Symbol to be passed when a computational
  path fails." (defconstant lpd3-utils::+failsym+) (#2# . 4284) lpd3-utils::fail (defun lpd3-utils::fail) (#2# . 4371) #:g614 #Y(lpd3-utils::fail nil nil (26 11 153 39 25 11 153 45 168 10 0 4 12 10 0 5 51 0 10 0 52 153 43 1 20 0 23 38 4 11 159 73 29) #1# #2# 4371) "Called when a computational path fails.
  If there are still unexplored paths, pops
  the first one and tries again. Otherwise,
  returns +failsym+." lpd3-utils::choose (defmacro lpd3-utils::choose) (#2# . 4602) (&rest lpd3-utils::choices) #:g616 #:g615 #:g617 lpd3-utils::choices lpd3-utils::c push #Y(nil nil nil (24 45 179 26 15 180 15 17 15 12 77 10 0 6 3 6 2 12 1 153 6 3 73 29) #1# #2# 4602) reverse append (lpd3-utils::fail) #Y(lpd3-utils::choose nil nil (24 45 175 24 45 176 26 10 1 5 45 177 10 0 45 178 10 0 39 30 15 75 1 181 12 10 0 5 16 182 12 19 2 27 12 10 0 4 6 1 12 19 2 183 7 2 73 38 4 1 184 73 29) #1# #2# 4602) "One of two ``amb'' operators. This
  one is easiest to use when the choices
  are plain data." lpd3-utils::%cb (defun lpd3-utils::%cb) (#2# . 5022) (lpd3-utils::fn lpd3-utils::choices) #Y(nil nil nil (26 13 1 10 0 5 12 19 2 187 29) #1# #2# 5022) #Y(lpd3-utils::%cb nil nil (24 45 140 24 45 178 26 10 0 39 25 10 0 5 39 9 34 191 12 11 153 3 52 153 13 1 10 0 4 12 20 1 23 38 4 19 0 165 29) #1# #2# 5022) "Helper function for choose-bind" lpd3-utils::choose-bind (defmacro lpd3-utils::choose-bind) (#2# . 5293) (lpd3-utils::var lpd3-utils::choices &body lpd3-utils::body) #:g621 #:g620 #:g622 lpd3-utils::var #Y(lpd3-utils::choose-bind nil nil (24 45 198 24 45 199 26 10 1 5 45 200 10 0 76 39 6 13 2 19 1 46 10 0 4 12 10 0 5 51 0 22 45 201 10 1 76 39 6 13 3 19 1 46 10 1 4 12 10 1 5 51 1 22 45 178 10 2 45 91 15 187 15 17 15 12 10 2 6 1 12 10 0 7 3 6 2 12 10 1 6 3 73 29) #1# #2# 5293) "The second of two ``amb'' operators. This
  one facilitates pushing functions to 
  paths, and running code with a 
  lexical binding ")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 34 15 12 19 2 16 15 2 15 17 15 18 19 3 19 1 2 73 29) #1# #2# 94) #Y(si::bytecodes nil nil (15 20 15 3 15 21 15 22 19 4 6 15 20 14 7 77 15 23 19 4 6 15 20 34 28 12 19 2 16 15 20 15 17 15 29 19 3 19 1 20 73 29) #1# #2# 387) #Y(si::bytecodes nil nil (15 13 15 3 15 30 15 31 19 4 6 15 13 14 7 77 15 32 19 4 6 15 13 1 37 12 19 2 16 15 13 15 17 15 38 19 3 19 1 13 73 29) #1# #2# 599) #Y(si::bytecodes nil nil (15 39 15 3 15 40 15 41 19 4 6 15 39 14 7 77 15 42 19 4 6 15 39 1 48 12 14 49 9 2 19 4 16 15 39 15 17 15 50 19 3 19 1 39 73 29) #1# #2# 846) #Y(si::bytecodes nil nil (15 51 15 3 15 52 15 53 19 4 6 15 51 14 7 77 15 54 19 4 6 15 51 1 65 12 14 49 9 3 19 4 16 15 51 15 17 15 66 19 3 19 1 51 73 29) #1# #2# 1160) #Y(si::bytecodes nil nil (15 67 15 3 15 68 15 69 19 4 6 15 67 14 7 77 15 70 19 4 6 15 67 1 79 12 14 49 9 1 19 4 16 15 67 15 17 15 80 19 3 19 1 67 73 29) #1# #2# 1519) #Y(si::bytecodes nil nil (33 81 52 82 73 29) #1# #2# 1935) #Y(si::bytecodes nil nil (15 83 15 3 15 84 15 85 19 4 6 15 83 14 7 77 15 86 19 4 6 15 83 1 92 12 14 49 9 2 19 4 16 15 83 15 17 15 93 19 3 19 1 83 73 29) #1# #2# 2670) #Y(si::bytecodes nil nil (15 94 15 3 15 95 15 96 19 4 6 15 94 14 7 77 15 97 19 4 6 15 94 1 110 12 14 49 9 3 19 4 16 15 94 15 17 15 111 19 3 19 1 94 73 29) #1# #2# 2841) #Y(si::bytecodes nil nil (15 112 15 3 15 113 15 114 19 4 6 15 112 14 7 77 15 115 19 4 6 15 112 1 120 12 14 49 9 3 19 4 16 15 112 15 17 15 121 19 3 19 1 112 73 29) #1# #2# 3360) #Y(si::bytecodes nil nil (15 122 15 3 15 123 15 124 19 4 6 15 122 14 7 77 15 125 19 4 6 15 122 1 131 12 14 49 9 1 19 4 16 15 122 15 17 15 132 19 3 19 1 122 73 29) #1# #2# 3621) #Y(si::bytecodes nil nil (15 133 15 3 15 134 15 135 19 4 6 15 133 14 7 77 15 136 19 4 6 15 133 1 141 12 14 49 9 2 19 4 16 15 133 15 17 15 142 19 3 19 1 133 73 29) #1# #2# 3778) #Y(si::bytecodes nil nil (15 143 15 3 15 144 15 145 19 4 6 15 143 14 7 77 15 146 19 4 6 15 143 1 151 12 14 49 9 2 19 4 16 15 143 15 17 15 152 19 3 19 1 143 73 29) #1# #2# 3931) #Y(si::bytecodes nil nil (1 153 16 154 75 52 153 15 153 15 155 15 156 19 3 19 15 153 15 3 15 157 15 158 19 4 6 1 153 73 29) #1# #2# 4104) #Y(si::bytecodes nil nil (15 159 1 160 17 161 15 159 15 155 15 162 19 3 19 15 159 15 3 15 163 15 164 19 4 6 1 159 73 29) #1# #2# 4284) #Y(si::bytecodes nil nil (15 165 15 3 15 166 15 167 19 4 6 15 165 14 7 77 77 19 4 6 15 165 1 169 12 19 2 16 15 165 15 17 15 170 19 3 19 1 165 73 29) #1# #2# 4371) #Y(si::bytecodes nil nil (15 171 15 3 15 172 15 173 19 4 6 15 171 14 7 77 15 174 19 4 6 15 171 1 185 12 14 49 9 1 19 4 16 15 171 15 17 15 186 19 3 19 1 171 73 29) #1# #2# 4602) #Y(si::bytecodes nil nil (15 187 15 3 15 188 15 189 19 4 6 15 187 14 7 77 15 190 19 4 6 15 187 34 192 12 19 2 16 15 187 15 17 15 193 19 3 19 1 187 73 29) #1# #2# 5022) #Y(si::bytecodes nil nil (15 194 15 3 15 195 15 196 19 4 6 15 194 14 7 77 15 197 19 4 6 15 194 1 202 12 14 49 9 3 19 4 16 15 194 15 17 15 203 19 3 19 1 194 73 29) #1# #2# 5293))
