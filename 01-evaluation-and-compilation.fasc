(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (102) ("LPD3-UTILS" si::select-package lpd3-utils::memoize ext::location (defun lpd3-utils::memoize) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/lpd3-utils/01-evaluation-and-compilation.lisp" . 116) ext::annotate :lambda-list (lpd3-utils::fn) lpd3-utils::fn :test equal make-hash-table lpd3-utils::cache lpd3-utils::args gethash lpd3-utils::presentp lpd3-utils::value apply si::hash-set #Y(nil nil nil (27 45 14 13 0 13 1 19 2 15 47 1 16 45 17 10 1 39 6 10 0 73 38 16 13 2 13 3 13 4 13 2 19 2 18 12 19 3 19 43 2 29) #1# #2# 116) #Y(lpd3-utils::memoize nil nil (24 45 9 26 14 10 33 11 12 19 2 12 45 13 34 20 73 43 1 29) #1# #2# 116) si::fset function "Given a function, returns a memoized
  version of the function. Stores prior
  results in a hash table for lookup rather
  than recalculation." si::set-documentation lpd3-utils::+unforced+ gensym si::*make-constant variable "Symbol used to indicate that a delay
  has not yet been forced." (defconstant lpd3-utils::+unforced+) (#2# . 569) lpd3-utils::delay "DELAY-" (#3="A delay object, used to contain data
  that is to be evaluated lazily." (lpd3-utils::forced lpd3-utils::closure)) ((lpd3-utils::forced lpd3-utils::closure t nil 0 nil)) lpd3-utils::copy-delay (lpd3-utils::make-delay) #3# lpd3-utils::delay-p si::define-structure (defstruct lpd3-utils::delay) (#2# . 685) lpd3-utils::make-delay (defun lpd3-utils::make-delay) (#2# . 685) (&key (#4=#:forced lpd3-utils::closure)) (nil :forced) lpd3-utils::closure #4# 0 si::make-structure #Y(lpd3-utils::make-delay nil nil (28 48 22 40 3 14 49 46 50 15 51 13 0 19 2 52 29) #1# #2# 685) find-class lpd3-utils::delay-forced symbol-package package ext::package-locked-p si::*ignore-package-locks* package-error "Ignore lock and proceed." "Attempt to define CAS accessor ~S in locked package." (lpd3-utils::delay-forced) :package si::signal-simple-error mp::cas-expander #:g419 si::x si::new si::old mp::compare-and-swap-structure quote si::structure-ref #Y(nil nil nil (24 45 67 24 45 68 26 19 0 27 12 19 0 27 12 46 69 46 70 77 77 13 0 13 1 15 71 13 2 15 72 1 33 6 2 12 9 0 13 0 10 1 6 6 12 15 73 13 2 15 72 1 33 6 2 12 8 0 6 4 12 72 6 43 2 29) #1# #2# 685) si::put-sysprop (defmacro lpd3-utils::delay) (#2# . 798) (lpd3-utils::expr) #:g421 #:g420 #:g422 si::dm-too-few-arguments lpd3-utils::expr si::dm-too-many-arguments lpd3-utils::self let (lpd3-utils::make-delay :forced lpd3-utils::+unforced+) setf lpd3-utils::delay-closure lambda #Y(lpd3-utils::delay nil nil (24 45 79 24 45 80 26 10 1 5 45 81 10 0 76 39 6 13 2 19 1 82 10 0 4 12 10 0 5 51 0 22 45 83 10 1 39 6 13 3 19 1 84 19 0 27 45 85 15 86 13 0 1 87 6 2 6 1 12 15 88 15 89 10 0 6 2 12 15 23 15 90 77 15 88 15 55 10 0 6 2 12 10 1 6 3 6 3 6 2 6 3 12 10 0 6 4 73 43 1 29) #1# #2# 798) t "Given an expression, place the unevaluated
  expression in a delay struct, to be
  evaluated at a later time." lpd3-utils::force (defun lpd3-utils::force) (#2# . 1166) (lpd3-utils::x) lpd3-utils::x eq #Y(lpd3-utils::force nil nil (24 45 98 26 13 0 19 1 40 39 31 13 0 19 1 55 12 11 26 17 99 39 12 13 0 19 1 89 12 20 0 23 38 6 13 0 19 1 55 38 4 10 0 73 29) #1# #2# 1166) "Given an object, if object is a delay,
  evaluate and return the value of its 
  expression, otherwise, just return the
  object.")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 34 21 12 19 2 22 15 2 15 23 15 24 19 3 25 1 2 73 29) #1# #2# 116) #Y(si::bytecodes nil nil (15 26 19 0 27 17 28 15 26 15 29 15 30 19 3 25 15 26 15 3 15 31 15 32 19 4 6 1 26 73 29) #1# #2# 569) #Y(si::bytecodes nil nil (15 33 15 34 77 77 15 35 15 36 15 37 77 77 77 15 38 9 1 77 15 39 15 40 19 15 41 15 33 15 3 15 42 15 43 19 4 6 15 44 15 3 15 45 15 46 19 4 6 15 44 14 7 77 15 47 19 4 6 15 33 19 1 54 78 51 15 44 1 53 12 19 2 22 1 55 16 56 45 57 10 0 39 10 10 0 16 58 39 4 11 59 76 39 16 15 60 15 61 15 62 15 63 14 64 13 0 19 6 65 43 1 15 55 15 66 1 74 12 19 3 75 1 33 73 29) #1# #2# 685) #Y(si::bytecodes nil nil (15 33 15 3 15 76 15 77 19 4 6 15 33 14 7 77 15 78 19 4 6 15 33 1 91 12 14 92 9 2 19 4 22 15 33 15 23 15 93 19 3 25 1 33 73 29) #1# #2# 798) #Y(si::bytecodes nil nil (15 94 15 3 15 95 15 96 19 4 6 15 94 14 7 77 15 97 19 4 6 15 94 1 100 12 19 2 22 15 94 15 23 15 101 19 3 25 1 94 73 29) #1# #2# 1166))
