(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (54) ("LPD3-UTILS" si::select-package lpd3-utils::mkstr ext::location (defun lpd3-utils::mkstr) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/lpd3-utils/06-structures.lisp" . 84) ext::annotate :lambda-list (&rest lpd3-utils::args) lpd3-utils::args make-string-output-stream lpd3-utils::s si::%dolist-var lpd3-utils::a princ get-output-stream-string close #Y(lpd3-utils::mkstr nil nil (27 45 9 19 0 10 45 11 64 37 10 1 45 12 38 20 10 0 4 45 13 13 0 13 2 19 2 14 10 1 5 51 1 43 1 10 0 40 -22 43 1 10 0 16 15 65 13 0 19 1 16 66 43 1 29) #1# #2# 84) si::fset function "Given a series of objects, 
  coerce and concatenate them into
  a single string. Mainly a 
  helper function for symb." si::set-documentation lpd3-utils::symb (defun lpd3-utils::symb) (#2# . 312) (&rest lpd3-utils::args) apply intern #Y(lpd3-utils::symb nil nil (27 45 9 33 2 12 13 0 19 2 26 12 19 1 27 12 72 1 29) #1# #2# 312) "Given a series of objects, create
  and intern a symbol whose name
  is the coercion to strings and 
  concatenation of the objects. Mainly
  a helper function for with-struct." lpd3-utils::with-struct (defmacro lpd3-utils::with-struct) (#2# . 561) ((lpd3-utils::name . lpd3-utils::fields) lpd3-utils::struct &body lpd3-utils::body) #:g495 #:g494 #:g496 si::dm-too-few-arguments #:g497 #:g498 lpd3-utils::name lpd3-utils::fields lpd3-utils::struct lpd3-utils::body gensym lpd3-utils::gs let lpd3-utils::f lpd3-utils::.gs #Y(nil nil nil (24 45 47 26 13 0 13 5 13 0 19 2 22 12 1 48 6 2 6 2 73 29) #1# #2# 561) mapcar #Y(lpd3-utils::with-struct nil nil (24 45 34 24 45 35 26 10 1 5 45 36 10 0 76 39 6 13 2 19 1 37 10 0 4 12 10 0 5 51 0 22 45 38 10 0 45 39 10 0 76 39 6 13 4 19 1 37 10 0 4 12 10 0 5 51 0 22 45 40 10 1 45 41 10 4 76 39 6 13 6 19 1 37 10 4 4 12 10 4 5 51 4 22 45 42 10 5 45 43 19 0 44 45 45 15 46 13 0 10 2 6 2 6 1 12 15 46 34 49 12 13 3 19 2 50 12 10 1 7 3 6 3 73 43 1 29) #1# #2# 561) t "(with-struct ((name . fields) struct &body body))
  Like with-slota, but for structures. 
  The ``name'' argument is the conc-name,
  which often ends in a hyphen.")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 1 17 12 19 2 18 15 2 15 19 15 20 19 3 21 1 2 73 29) #1# #2# 84) #Y(si::bytecodes nil nil (15 22 15 3 15 23 15 24 19 4 6 15 22 14 7 77 15 25 19 4 6 15 22 1 28 12 19 2 18 15 22 15 19 15 29 19 3 21 1 22 73 29) #1# #2# 312) #Y(si::bytecodes nil nil (15 30 15 3 15 31 15 32 19 4 6 15 30 14 7 77 15 33 19 4 6 15 30 34 51 12 14 52 9 3 19 4 18 15 30 15 19 15 53 19 3 21 1 30 73 29) #1# #2# 561))
