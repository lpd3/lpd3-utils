(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (78) ("LPD3-UTILS" si::select-package lpd3-utils::%destruc ext::location (defun lpd3-utils::%destruc) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/lpd3-utils/15-sequences.lisp" . 60) ext::annotate :lambda-list (lpd3-utils::pat lpd3-utils::seq &optional (lpd3-utils::atom? (function atom)) (lpd3-utils::n 0)) lpd3-utils::pat lpd3-utils::seq atom lpd3-utils::atom? lpd3-utils::n &rest eq cadr &body rest subseq 1+ lpd3-utils::rec lpd3-utils::p elt gensym lpd3-utils::var #Y(lpd3-utils::%destruc nil nil (24 45 9 24 45 10 25 40 4 33 11 12 46 12 25 40 3 9 0 46 13 26 10 3 76 39 5 75 73 38 162 13 1 13 3 20 1 23 39 5 10 3 38 34 10 3 4 12 1 14 17 15 39 7 10 3 16 16 38 18 10 3 4 12 1 17 17 15 39 7 10 3 16 16 38 2 75 45 18 10 0 39 18 13 0 15 19 13 3 10 1 6 3 6 2 6 1 73 38 91 10 4 4 12 10 4 5 12 13 3 13 2 10 1 16 20 12 19 4 2 12 46 21 46 22 13 4 13 0 20 1 23 39 20 13 0 15 23 13 5 10 3 6 3 6 2 12 10 1 3 73 38 36 19 0 24 45 25 13 0 15 23 13 6 10 4 6 3 6 2 12 13 1 13 0 13 5 19 3 2 3 12 10 2 3 73 43 1 43 2 43 1 29) #1# #2# 60) si::fset function "Helper function for dbind." si::set-documentation lpd3-utils::%dbind-aux (defun lpd3-utils::%dbind-aux) (#2# . 1091) (lpd3-utils::binds lpd3-utils::body) lpd3-utils::binds lpd3-utils::body progn let lpd3-utils::b consp #Y(nil nil nil (24 45 39 26 10 0 4 16 40 39 7 10 0 4 73 38 4 10 0 73 29) #1# #2# 1091) mapcar #Y(nil nil nil (24 45 39 26 10 0 4 16 40 73 39 5 10 0 5 73 29) #1# #2# 1091) mapcan append #Y(lpd3-utils::%dbind-aux nil nil (24 45 35 24 45 36 26 10 1 76 39 10 15 37 10 0 7 2 73 38 35 15 38 1 41 12 13 1 19 2 42 12 1 43 12 13 1 19 2 44 12 13 0 19 2 31 6 1 12 19 2 45 7 2 73 29) #1# #2# 1091) "Helper function for dbind." lpd3-utils::dbind (defmacro lpd3-utils::dbind) (#2# . 1554) (lpd3-utils::pat lpd3-utils::seq &body lpd3-utils::body) #:g579 #:g578 #:g580 si::dm-too-few-arguments lpd3-utils::gseq #Y(lpd3-utils::dbind nil nil (24 45 52 24 45 53 26 10 1 5 45 54 10 0 76 39 6 13 2 19 1 55 10 0 4 12 10 0 5 51 0 22 45 9 10 1 76 39 6 13 3 19 1 55 10 1 4 12 10 1 5 51 1 22 45 10 10 2 45 36 19 0 24 45 56 15 38 13 0 10 2 6 2 6 1 12 13 3 13 0 33 11 12 19 3 2 12 13 1 19 2 31 6 3 73 43 1 29) #1# #2# 1554) t "Like destructuring-bind, but can 
  handle any kind of sequence." lpd3-utils::%with-places-aux (defun lpd3-utils::%with-places-aux) (#2# . 1790) (lpd3-utils::binds lpd3-utils::body) symbol-macrolet #Y(nil nil nil (24 45 39 26 10 0 4 16 40 39 7 10 0 4 73 38 4 10 0 73 29) #1# #2# 1790) #Y(nil nil nil (24 45 39 26 10 0 4 16 40 73 39 5 10 0 5 73 29) #1# #2# 1790) #Y(lpd3-utils::%with-places-aux nil nil (24 45 35 24 45 36 26 10 1 76 39 10 15 37 10 0 7 2 73 38 29 15 64 1 65 12 13 1 19 2 42 12 1 66 12 13 1 19 2 44 12 13 0 19 2 60 6 3 73 29) #1# #2# 1790) "Helper function for with-places" lpd3-utils::with-places (defmacro lpd3-utils::with-places) (#2# . 2262) (lpd3-utils::pat lpd3-utils::seq &body lpd3-utils::body) #:g582 #:g581 #:g583 #Y(lpd3-utils::with-places nil nil (24 45 73 24 45 74 26 10 1 5 45 75 10 0 76 39 6 13 2 19 1 55 10 0 4 12 10 0 5 51 0 22 45 9 10 1 76 39 6 13 3 19 1 55 10 1 4 12 10 1 5 51 1 22 45 10 10 2 45 36 19 0 24 45 56 15 38 13 0 10 2 6 2 6 1 12 13 3 13 0 33 11 12 19 3 2 12 13 1 19 2 60 6 3 73 43 1 29) #1# #2# 2262) "A more general destructuring macro
  for arbitrary sequences. Allows the
  various symbols in the pattern to 
  act like slots in an object, and thus,
  to be setfable. dbind is more efficient,
  and thus preferable, when not 
  changing the values in the seq arg.")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 1 26 12 19 2 27 15 2 15 28 15 29 19 3 30 1 2 73 29) #1# #2# 60) #Y(si::bytecodes nil nil (15 31 15 3 15 32 15 33 19 4 6 15 31 14 7 77 15 34 19 4 6 15 31 1 46 12 19 2 27 15 31 15 28 15 47 19 3 30 1 31 73 29) #1# #2# 1091) #Y(si::bytecodes nil nil (15 48 15 3 15 49 15 50 19 4 6 15 48 14 7 77 15 51 19 4 6 15 48 1 57 12 14 58 9 3 19 4 27 15 48 15 28 15 59 19 3 30 1 48 73 29) #1# #2# 1554) #Y(si::bytecodes nil nil (15 60 15 3 15 61 15 62 19 4 6 15 60 14 7 77 15 63 19 4 6 15 60 1 67 12 19 2 27 15 60 15 28 15 68 19 3 30 1 60 73 29) #1# #2# 1790) #Y(si::bytecodes nil nil (15 69 15 3 15 70 15 71 19 4 6 15 69 14 7 77 15 72 19 4 6 15 69 1 76 12 14 58 9 3 19 4 27 15 69 15 28 15 77 19 3 30 1 69 73 29) #1# #2# 2262))
