(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (270) ("LPD3-UTILS" si::select-package lpd3-utils::fif ext::location (defun lpd3-utils::fif) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/lpd3-utils/03-data-and-control-flow.lisp" . 106) ext::annotate :lambda-list (if lpd3-utils::then &optional lpd3-utils::else) if lpd3-utils::then lpd3-utils::else lpd3-utils::x #Y(nil nil nil (24 45 12 26 13 3 13 0 20 1 23 39 10 13 2 13 0 20 1 23 38 13 10 1 73 39 8 13 1 13 0 20 1 23 29) #1# #2# 106) #Y(lpd3-utils::fif nil nil (24 45 9 24 45 10 25 40 2 77 46 11 26 34 13 73 29) #1# #2# 106) si::fset function "Functional if. Takes an if function
  and a then function and an optional
  else function. Returns a function of 
  one arg that will invoke if on its arg, 
  and then either invoke then or else 
  (or return nil) depending on the 
  result of if." si::set-documentation lpd3-utils::lrec (defun lpd3-utils::lrec) (#2# . 521) (lpd3-utils::rec &optional lpd3-utils::base) lpd3-utils::rec lpd3-utils::base lpd3-utils::lst functionp #Y(nil nil nil (26 10 0 5 12 32 1 18 1 29) #1# #2# 521) #Y(lpd3-utils::self nil nil (24 45 25 26 10 0 76 39 19 10 2 16 26 39 8 13 2 20 0 23 38 4 10 2 73 38 13 13 3 10 0 4 12 34 27 12 20 2 23 29) #1# #2# 521) #Y(lpd3-utils::lrec nil nil (24 45 23 25 40 2 77 46 24 26 31 1 28 32 0 73 43 1 29) #1# #2# 521) "Used to build a function that recurs
  over a list. Takes a function, rec, 
  of two args, the first is the 
  current car and the second is a 
  a reference to the next recursion.
  Lrec also takes an optional
  base, which can be a function or an 
  object. If it is a function, it must
  take no args and will be called when the
  list is exhausted, otherwise base itself
  or nil is returned." lpd3-utils::while (defmacro lpd3-utils::while) (#2# . 1278) (lpd3-utils::test &body lpd3-utils::body) #:g425 #:g424 #:g426 si::dm-too-few-arguments lpd3-utils::test lpd3-utils::body do not funcall #Y(lpd3-utils::while nil nil (24 45 35 24 45 36 26 10 1 5 45 37 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 39 10 1 45 40 15 41 77 15 42 15 43 10 1 6 2 6 2 6 1 12 10 0 7 4 73 29) #1# #2# 1278) t "(while (test &body body)). Execute
  body while test returns non-nil." lpd3-utils::until (defmacro lpd3-utils::until) (#2# . 1629) (lpd3-utils::test &body lpd3-utils::body) #:g428 #:g427 #:g429 ((funcall lpd3-utils::test)) #Y(lpd3-utils::until nil nil (24 45 51 24 45 52 26 10 1 5 45 53 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 39 10 1 45 40 15 41 77 15 54 10 0 7 4 73 29) #1# #2# 1629) "(until (test &body body). Execute body
  until test returns non-nil." lpd3-utils::if3 (defmacro lpd3-utils::if3) (#2# . 1792) (lpd3-utils::test lpd3-utils::t-case lpd3-utils::nil-case lpd3-utils::?-case) #:g431 #:g430 #:g432 lpd3-utils::t-case lpd3-utils::nil-case lpd3-utils::?-case si::dm-too-many-arguments case (nil) lpd3-utils::? #Y(lpd3-utils::if3 nil nil (24 45 61 24 45 62 26 10 1 5 45 63 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 39 10 1 76 39 6 13 3 19 1 38 10 1 4 12 10 1 5 51 1 22 45 64 10 2 76 39 6 13 4 19 1 38 10 2 4 12 10 2 5 51 2 22 45 65 10 3 76 39 6 13 5 19 1 38 10 3 4 12 10 3 5 51 3 22 45 66 10 4 39 6 13 6 19 1 67 15 68 13 3 15 69 10 1 6 2 12 15 70 10 0 6 2 12 15 45 10 2 6 2 6 5 73 29) #1# #2# 1792) "3-way if. Takes a test, a true clause, 
  a nil clause and a ? clause. Test must
  be able to return the symbol ? as well as
  other true values and nil." lpd3-utils::nif (defmacro lpd3-utils::nif) (#2# . 2069) (lpd3-utils::expr lpd3-utils::pos lpd3-utils::zero lpd3-utils::neg) #:g434 #:g433 #:g435 lpd3-utils::expr lpd3-utils::pos lpd3-utils::zero lpd3-utils::neg gensym lpd3-utils::g let cond plusp minusp #Y(lpd3-utils::nif nil nil (24 45 77 24 45 78 26 10 1 5 45 79 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 80 10 1 76 39 6 13 3 19 1 38 10 1 4 12 10 1 5 51 1 22 45 81 10 2 76 39 6 13 4 19 1 38 10 2 4 12 10 2 5 51 2 22 45 82 10 3 76 39 6 13 5 19 1 38 10 3 4 12 10 3 5 51 3 22 45 83 10 4 39 6 13 6 19 1 67 19 0 84 45 85 15 86 13 0 10 4 6 2 6 1 12 15 87 15 88 10 0 6 2 12 10 3 6 2 12 15 89 10 0 6 2 12 10 1 6 2 12 15 45 10 2 6 2 6 4 6 3 73 43 1 29) #1# #2# 2069) "Numeric if. Takes an expression, a positive 
  clause, a zero clause, and a negative 
  clause. Expression must return a real number
  that may be positive, negative or zero.
  Branches according to the sign of the
  result." lpd3-utils::in (defmacro lpd3-utils::in) (#2# . 2466) (lpd3-utils::obj &rest lpd3-utils::choices) #:g437 #:g436 #:g438 lpd3-utils::obj lpd3-utils::choices lpd3-utils::insym or lpd3-utils::c eql #Y(nil nil nil (24 45 103 26 15 104 13 1 10 0 6 3 73 29) #1# #2# 2466) mapcar #Y(lpd3-utils::in nil nil (24 45 96 24 45 97 26 10 1 5 45 98 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 99 10 1 45 100 19 0 84 45 101 15 86 13 0 10 2 6 2 6 1 12 15 102 34 105 12 13 1 19 2 106 7 2 6 3 73 43 1 29) #1# #2# 2466) "Takes an item obj followed by zero or
  more more items choices. Returns obj
  if obj is found in choices, else nil. Short 
  circuits." lpd3-utils::inq (defmacro lpd3-utils::inq) (#2# . 2806) (lpd3-utils::obj &rest lpd3-utils::args) #:g440 #:g439 #:g441 lpd3-utils::args lpd3-utils::a quote #Y(nil nil nil (24 45 117 26 15 118 10 0 6 2 73 29) #1# #2# 2806) #Y(lpd3-utils::inq nil nil (24 45 113 24 45 114 26 10 1 5 45 115 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 99 10 1 45 116 15 92 13 1 1 119 12 13 0 19 2 106 7 3 73 29) #1# #2# 2806) "Like IN, but first quotes its 
  args." lpd3-utils::in-if (defmacro lpd3-utils::in-if) (#2# . 2979) (lpd3-utils::fn &rest lpd3-utils::choices) #:g443 #:g442 #:g444 lpd3-utils::fn lpd3-utils::fnsym #Y(nil nil nil (24 45 103 26 15 43 13 1 10 0 6 3 73 29) #1# #2# 2979) #Y(lpd3-utils::in-if nil nil (24 45 126 24 45 127 26 10 1 5 45 128 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 129 10 1 45 100 19 0 84 45 130 15 86 13 0 10 2 6 2 6 1 12 15 102 34 131 12 13 1 19 2 106 7 2 6 3 73 43 1 29) #1# #2# 2979) "Given a predicate function and a 
  series of choices, returns the first
  element in choices that passes the 
  predicate, else nil." lpd3-utils::for (defmacro lpd3-utils::for) (#2# . 3344) ((lpd3-utils::var lpd3-utils::start lpd3-utils::stop) &body lpd3-utils::body) #:g446 #:g445 #:g447 #:g448 #:g449 lpd3-utils::var lpd3-utils::start lpd3-utils::stop lpd3-utils::gstop 1+ > #Y(lpd3-utils::for nil nil (24 45 138 24 45 139 26 10 1 5 45 140 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 141 10 0 45 142 10 0 76 39 6 13 4 19 1 38 10 0 4 12 10 0 5 51 0 22 45 143 10 1 76 39 6 13 5 19 1 38 10 1 4 12 10 1 5 51 1 22 45 144 10 2 76 39 6 13 6 19 1 38 10 2 4 12 10 2 5 51 2 22 45 145 10 5 45 40 10 4 39 6 13 8 19 1 67 19 0 84 45 146 15 41 13 4 13 3 15 147 10 4 6 2 6 3 12 13 0 10 2 6 2 6 2 12 15 148 13 4 10 0 6 3 6 1 12 10 1 7 4 73 43 1 29) #1# #2# 3344) "(for ((var start stop) &body body)). 
  var: symbol; start, stop: integers, 
  stop > start. Execute body repeatedly, 
  with var bound to the integers from
  start through stop." lpd3-utils::allf (defmacro lpd3-utils::allf) (#2# . 3702) (lpd3-utils::val &rest lpd3-utils::places) #:g451 #:g450 #:g452 lpd3-utils::val lpd3-utils::places "GVAL" lpd3-utils::gval setf lpd3-utils::p #Y(nil nil nil (24 45 163 26 13 0 10 1 6 2 73 29) #1# #2# 3702) mapcan #Y(lpd3-utils::allf nil nil (24 45 155 24 45 156 26 10 1 5 45 157 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 158 10 1 45 159 15 160 19 1 84 45 161 15 86 13 0 10 2 6 2 6 1 12 15 162 34 164 12 13 1 19 2 165 7 2 6 3 73 43 1 29) #1# #2# 3702) "Given a value and an arbitrary number
  of places, setf all the places to the 
  value." lpd3-utils::nilf (defmacro lpd3-utils::nilf) (#2# . 3999) (&rest lpd3-utils::places) #:g454 #:g453 #:g455 #Y(lpd3-utils::nilf nil nil (24 45 172 24 45 173 26 10 1 5 45 174 10 0 45 159 15 151 77 10 0 7 3 73 29) #1# #2# 3999) "Given an arbitrary number of 
  places, setf all of them to nil." lpd3-utils::tf (defmacro lpd3-utils::tf) (#2# . 4123) (&rest lpd3-utils::places) #:g457 #:g456 #:g458 #Y(lpd3-utils::tf nil nil (24 45 181 24 45 182 26 10 1 5 45 183 10 0 45 159 15 151 15 45 10 0 7 3 73 29) #1# #2# 4123) "Given an arbitrary number of 
  places, setf all of them to T." lpd3-utils::%toggle-aux (defmacro lpd3-utils::%toggle-aux) (#2# . 4241) (&environment si::env si::%reference) #:g459 si::env #:g460 si::%reference get-setf-expansion si::getter si::setter si::stores si::vals si::vars si::v #Y(nil nil nil (24 45 200 26 19 0 84 12 10 0 6 2 73 29) #1# #2# 4241) si::all-vars symbolp car let* declare :read-only first subst si::let-list si::d append nreverse #Y(lpd3-utils::%toggle-aux nil nil (24 45 190 24 45 191 26 10 1 5 45 192 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 193 10 1 39 6 13 3 19 1 67 13 0 13 2 19 2 194 47 4 195 47 3 196 47 2 197 47 1 198 45 199 1 201 12 75 7 1 12 19 2 106 45 202 10 5 16 203 39 51 15 42 13 5 33 204 12 13 0 19 2 106 7 3 12 10 3 4 12 15 205 13 0 15 206 14 207 33 208 12 13 0 19 2 106 7 2 6 2 12 10 4 6 4 12 19 3 209 38 116 13 1 13 2 77 46 210 46 200 46 211 38 29 10 0 5 12 10 1 5 12 10 0 4 12 10 1 4 6 2 12 10 2 3 12 53 2 53 1 53 0 10 0 76 39 -32 10 6 4 12 15 42 13 8 33 204 12 13 3 19 2 106 7 3 6 2 12 13 3 13 2 19 2 212 7 2 51 2 15 205 10 2 16 213 12 15 206 14 207 33 208 12 13 3 19 2 106 12 13 4 19 2 212 7 2 6 2 12 10 7 6 4 73 43 3 43 1 43 5 29) #1# #2# 4241) "Helper modify-macro for toggle." lpd3-utils::toggle (defmacro lpd3-utils::toggle) (#2# . 4319) (&rest lpd3-utils::places) #:g462 #:g461 #:g463 progn #Y(nil nil nil (24 45 163 26 15 186 10 0 6 2 73 29) #1# #2# 4319) #Y(lpd3-utils::toggle nil nil (24 45 220 24 45 221 26 10 1 5 45 222 10 0 45 159 15 223 1 224 12 13 0 19 2 106 7 2 73 29) #1# #2# 4319) "Given an arbitrary number of places, 
  setf them to the opposite of their 
  current (possibly generalized) Boolean
  value. That is, if the current value
  of the place is NIL, set it to T. 
  Otherwise, set it to NIL." lpd3-utils::sort-places (defmacro lpd3-utils::sort-places) (#2# . 4683) (lpd3-utils::op &rest lpd3-utils::places) #:g465 #:g464 #:g466 lpd3-utils::op list #Y(nil nil nil (24 45 163 26 15 235 13 0 19 1 194 69 21 23 29) #1# #2# 4683) lpd3-utils::expansions third apply lpd3-utils::store-vars lpd3-utils::e #Y(nil nil nil (24 45 241 26 10 0 4 12 10 0 16 238 12 19 2 212 29) #1# #2# 4683) second fifth #Y(nil nil nil (24 45 241 26 10 0 16 243 12 10 0 16 244 6 1 12 19 2 212 29) #1# #2# 4683) rest lpd3-utils::arg unless rotatef #Y(nil nil nil (24 45 247 26 15 248 13 5 10 1 4 12 10 0 6 3 12 15 249 10 1 4 12 10 0 6 3 6 3 73 29) #1# #2# 4683) #Y(nil nil nil (24 45 246 26 34 250 12 10 0 5 12 19 2 106 29) #1# #2# 4683) lpd3-utils::temps mapcon fourth #Y(lpd3-utils::sort-places nil nil (24 45 231 24 45 232 26 10 1 5 45 233 10 0 76 39 6 13 2 19 1 38 10 0 4 12 10 0 5 51 0 22 45 234 10 1 45 159 1 236 12 13 0 19 2 106 45 237 33 212 12 33 238 12 13 0 19 2 106 12 19 2 239 45 240 15 205 33 235 12 1 242 12 13 1 19 2 165 12 1 245 12 13 1 19 2 165 12 19 3 106 12 34 251 12 14 252 19 2 253 12 33 254 12 13 1 19 2 106 12 19 2 212 7 3 73 43 2 29) #1# #2# 4683) "Given a comparison function of two
  args and an arbitrary number of 
  places, (destructively) exchange the 
  values in the places
  so that the order the places appear in
  the arg list matches the order of their
  contents as sorted by the function." lpd3-utils::most-of (defun lpd3-utils::most-of) (#2# . 5943) (&rest lpd3-utils::args) lpd3-utils::hits lpd3-utils::all si::%dolist-var #:g480 + #:g482 / #Y(lpd3-utils::most-of nil nil (27 45 116 9 0 9 0 46 261 46 262 10 2 45 263 38 47 10 0 4 45 117 8 1 45 264 13 3 13 0 19 2 265 51 3 43 1 10 0 39 16 8 1 45 266 13 4 13 0 19 2 265 51 4 43 1 10 1 5 51 1 43 1 10 0 40 -49 43 1 13 1 13 0 9 2 19 2 267 12 19 2 148 43 2 29) #1# #2# 5943) "Given an arbitrary number of args,
  return T if more than half evalauate to
  non-nil, else return NIL.")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 34 14 12 19 2 15 15 2 15 16 15 17 19 3 18 1 2 73 29) #1# #2# 106) #Y(si::bytecodes nil nil (15 19 15 3 15 20 15 21 19 4 6 15 19 14 7 77 15 22 19 4 6 15 19 34 29 12 19 2 15 15 19 15 16 15 30 19 3 18 1 19 73 29) #1# #2# 521) #Y(si::bytecodes nil nil (15 31 15 3 15 32 15 33 19 4 6 15 31 14 7 77 15 34 19 4 6 15 31 1 44 12 14 45 9 2 19 4 15 15 31 15 16 15 46 19 3 18 1 31 73 29) #1# #2# 1278) #Y(si::bytecodes nil nil (15 47 15 3 15 48 15 49 19 4 6 15 47 14 7 77 15 50 19 4 6 15 47 1 55 12 14 45 9 2 19 4 15 15 47 15 16 15 56 19 3 18 1 47 73 29) #1# #2# 1629) #Y(si::bytecodes nil nil (15 57 15 3 15 58 15 59 19 4 6 15 57 14 7 77 15 60 19 4 6 15 57 1 71 12 14 45 9 5 19 4 15 15 57 15 16 15 72 19 3 18 1 57 73 29) #1# #2# 1792) #Y(si::bytecodes nil nil (15 73 15 3 15 74 15 75 19 4 6 15 73 14 7 77 15 76 19 4 6 15 73 1 90 12 14 45 9 5 19 4 15 15 73 15 16 15 91 19 3 18 1 73 73 29) #1# #2# 2069) #Y(si::bytecodes nil nil (15 92 15 3 15 93 15 94 19 4 6 15 92 14 7 77 15 95 19 4 6 15 92 34 107 12 14 45 9 2 19 4 15 15 92 15 16 15 108 19 3 18 1 92 73 29) #1# #2# 2466) #Y(si::bytecodes nil nil (15 109 15 3 15 110 15 111 19 4 6 15 109 14 7 77 15 112 19 4 6 15 109 1 120 12 14 45 9 2 19 4 15 15 109 15 16 15 121 19 3 18 1 109 73 29) #1# #2# 2806) #Y(si::bytecodes nil nil (15 122 15 3 15 123 15 124 19 4 6 15 122 14 7 77 15 125 19 4 6 15 122 34 132 12 14 45 9 2 19 4 15 15 122 15 16 15 133 19 3 18 1 122 73 29) #1# #2# 2979) #Y(si::bytecodes nil nil (15 134 15 3 15 135 15 136 19 4 6 15 134 14 7 77 15 137 19 4 6 15 134 1 149 12 14 45 9 2 19 4 15 15 134 15 16 15 150 19 3 18 1 134 73 29) #1# #2# 3344) #Y(si::bytecodes nil nil (15 151 15 3 15 152 15 153 19 4 6 15 151 14 7 77 15 154 19 4 6 15 151 34 166 12 14 45 9 2 19 4 15 15 151 15 16 15 167 19 3 18 1 151 73 29) #1# #2# 3702) #Y(si::bytecodes nil nil (15 168 15 3 15 169 15 170 19 4 6 15 168 14 7 77 15 171 19 4 6 15 168 1 175 12 14 45 9 1 19 4 15 15 168 15 16 15 176 19 3 18 1 168 73 29) #1# #2# 3999) #Y(si::bytecodes nil nil (15 177 15 3 15 178 15 179 19 4 6 15 177 14 7 77 15 180 19 4 6 15 177 1 184 12 14 45 9 1 19 4 15 15 177 15 16 15 185 19 3 18 1 177 73 29) #1# #2# 4123) #Y(si::bytecodes nil nil (15 186 15 3 15 187 15 188 19 4 6 15 186 14 7 77 15 189 19 4 6 15 186 1 214 12 14 45 9 2 19 4 15 15 186 15 16 15 215 19 3 18 1 186 73 29) #1# #2# 4241) #Y(si::bytecodes nil nil (15 216 15 3 15 217 15 218 19 4 6 15 216 14 7 77 15 219 19 4 6 15 216 1 225 12 14 45 9 1 19 4 15 15 216 15 16 15 226 19 3 18 1 216 73 29) #1# #2# 4319) #Y(si::bytecodes nil nil (15 227 15 3 15 228 15 229 19 4 6 15 227 14 7 77 15 230 19 4 6 15 227 34 255 12 14 45 9 2 19 4 15 15 227 15 16 15 256 19 3 18 1 227 73 29) #1# #2# 4683) #Y(si::bytecodes nil nil (15 257 15 3 15 258 15 259 19 4 6 15 257 14 7 77 15 260 19 4 6 15 257 1 268 12 19 2 15 15 257 15 16 15 269 19 3 18 1 257 73 29) #1# #2# 5943))
