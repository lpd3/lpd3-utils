(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (117) ("LPD3-UTILS" si::select-package lpd3-utils::%mvdo-rebind-gen ext::location (defun lpd3-utils::%mvdo-rebind-gen) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/lpd3-utils/04-iteration.lisp" . 82) ext::annotate :lambda-list (lpd3-utils::rebinds) lpd3-utils::rebinds length <= caar atom setq multiple-value-setq third #Y(lpd3-utils::%mvdo-rebind-gen nil nil (24 45 9 26 10 0 76 39 5 75 73 38 62 10 0 4 16 10 12 9 3 19 2 11 39 10 10 0 5 12 19 1 2 38 40 10 0 16 12 16 13 39 6 1 14 73 38 4 1 15 73 12 10 0 16 12 12 10 0 4 16 16 6 3 12 10 0 5 12 19 1 2 3 73 29) #1# #2# 82) si::fset function "Helper function for mv-do*." si::set-documentation lpd3-utils::%mvdo-gen (defun lpd3-utils::%mvdo-gen) (#2# . 465) (lpd3-utils::binds lpd3-utils::rebinds lpd3-utils::test lpd3-utils::body) lpd3-utils::binds lpd3-utils::test lpd3-utils::body gensym lpd3-utils::label progn if return go append lpd3-utils::rec cadar lpd3-utils::expr lpd3-utils::var/s let multiple-value-bind #Y(lpd3-utils::%mvdo-gen nil nil (24 45 26 24 45 9 24 45 27 24 45 28 26 10 3 76 39 58 19 0 29 45 30 15 31 77 13 0 15 32 10 2 4 12 15 33 15 31 10 2 5 7 2 6 2 6 3 12 13 1 13 3 19 1 2 12 15 34 10 0 6 2 6 1 12 19 3 35 7 5 73 43 1 38 69 10 3 5 12 13 2 13 1 13 0 19 4 22 45 36 10 4 16 12 12 10 4 16 37 12 46 38 46 39 10 0 16 13 39 19 15 40 13 0 10 1 6 2 6 1 12 10 2 6 3 73 38 12 15 41 13 0 13 1 10 2 6 4 73 43 2 43 1 29) #1# #2# 465) "Helper function for mv-do*." lpd3-utils::mvdo* (defmacro lpd3-utils::mvdo*) (#2# . 1064) (lpd3-utils::parm-clause lpd3-utils::test-clause &body lpd3-utils::body) #:g484 #:g483 #:g485 si::dm-too-few-arguments lpd3-utils::parm-clause lpd3-utils::test-clause #Y(lpd3-utils::mvdo* nil nil (24 45 48 24 45 49 26 10 1 5 45 50 10 0 76 39 6 13 2 19 1 51 10 0 4 12 10 0 5 51 0 22 45 52 10 1 76 39 6 13 3 19 1 51 10 1 4 12 10 1 5 51 1 22 45 53 10 2 45 28 13 2 13 1 13 0 19 3 22 29) #1# #2# 1064) t "Like DO*, but allows access to multiple
  values." lpd3-utils::%shuffle (defun lpd3-utils::%shuffle) (#2# . 1221) (lpd3-utils::x lpd3-utils::y) lpd3-utils::x lpd3-utils::y #Y(lpd3-utils::%shuffle nil nil (24 45 61 24 45 62 26 10 1 76 39 6 10 0 73 38 33 10 0 76 39 6 10 1 73 38 23 10 1 4 12 10 0 4 12 10 1 5 12 10 0 5 12 19 2 57 7 3 73 29) #1# #2# 1221) "Helper function for mvpsetq" lpd3-utils::mvpsetq (defmacro lpd3-utils::mvpsetq) (#2# . 1410) (&rest lpd3-utils::args) #:g487 #:g486 #:g488 lpd3-utils::args :strict lpd3-utils::batches lpd3-utils::pairs lpd3-utils::p #Y(nil nil nil (24 45 61 26 19 0 29 29) #1# #2# 1410) alexandria::ensure-list mapcar #Y(nil nil nil (24 45 76 26 1 77 12 10 0 4 12 19 1 78 12 19 2 79 29) #1# #2# 1410) lpd3-utils::syms lpd3-utils::ps lpd3-utils::ss lpd3-utils::s #Y(nil nil nil (24 45 76 24 45 84 26 10 1 4 12 19 1 78 12 13 0 19 2 57 29) #1# #2# 1410) mapcan consp #Y(lpd3-utils::rec nil nil (24 45 82 24 45 83 26 10 1 76 39 18 15 14 1 85 12 13 4 13 3 19 3 86 7 2 73 38 76 10 1 5 12 10 0 5 12 32 2 18 2 45 28 10 2 16 12 12 10 2 16 37 12 46 38 46 39 10 0 16 87 39 16 15 41 10 3 4 12 13 1 10 2 6 4 73 38 23 15 40 10 3 4 12 10 1 6 1 12 19 2 35 6 1 12 10 2 6 3 73 43 2 43 1 29) #1# #2# 1410) #Y(lpd3-utils::mvpsetq nil nil (24 45 69 24 45 70 26 10 1 5 45 71 10 0 45 72 13 0 9 2 14 73 77 19 4 74 45 75 1 80 12 13 0 19 2 79 45 81 31 1 88 13 2 13 1 32 0 18 2 43 1 43 2 29) #1# #2# 1410) "Like multiple-value-serq, but bindings are executed
  in parallel. Principally a helper macro
  for mvdo." lpd3-utils::mvdo (defmacro lpd3-utils::mvdo) (#2# . 2853) ((lpd3-utils::binds &rest lpd3-utils::result) &body lpd3-utils::body) #:g490 #:g489 #:g491 #:g492 #:g493 lpd3-utils::result lpd3-utils::b listp #Y(nil nil nil (24 45 61 26 19 0 29 29) #1# #2# 2853) #Y(nil nil nil (24 45 101 26 10 0 4 16 102 39 13 1 103 12 10 0 4 12 19 2 79 38 4 19 0 29 29) #1# #2# 2853) lpd3-utils::temps alexandria::mappend lpd3-utils::var cadr #Y(nil nil nil (24 45 101 24 45 107 26 13 0 10 1 16 108 6 2 73 29) #1# #2# 2853) prog #Y(nil nil nil (24 45 101 24 45 107 26 13 1 10 0 6 2 73 29) #1# #2# 2853) car when #Y(nil nil nil (24 45 101 26 10 0 16 16 73 39 12 10 0 4 12 10 0 16 16 6 2 73 29) #1# #2# 2853) #Y(lpd3-utils::mvdo nil nil (24 45 95 24 45 96 26 10 1 5 45 97 10 0 76 39 6 13 2 19 1 51 10 0 4 12 10 0 5 51 0 22 45 98 10 0 45 99 10 0 76 39 6 13 4 19 1 51 10 0 4 12 10 0 5 51 0 22 45 26 10 1 45 100 10 4 45 28 19 0 29 12 1 104 12 13 2 19 2 79 12 46 105 46 30 15 40 33 78 12 13 1 19 2 106 12 15 65 1 109 12 13 4 13 1 19 3 86 7 2 12 15 110 1 111 12 33 78 12 33 112 12 13 4 19 2 79 12 19 2 106 12 33 78 12 13 1 19 2 106 12 19 3 79 12 13 0 15 113 14 27 15 33 15 31 10 3 7 2 6 2 6 3 12 13 2 15 65 1 114 12 13 4 19 2 86 7 2 12 15 34 10 0 6 2 6 2 12 19 2 35 7 5 6 4 73 43 2 29) #1# #2# 2853) "Like DO, but permits multiple values.")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 1 17 12 19 2 18 15 2 15 19 15 20 19 3 21 1 2 73 29) #1# #2# 82) #Y(si::bytecodes nil nil (15 22 15 3 15 23 15 24 19 4 6 15 22 14 7 77 15 25 19 4 6 15 22 1 42 12 19 2 18 15 22 15 19 15 43 19 3 21 1 22 73 29) #1# #2# 465) #Y(si::bytecodes nil nil (15 44 15 3 15 45 15 46 19 4 6 15 44 14 7 77 15 47 19 4 6 15 44 1 54 12 14 55 9 3 19 4 18 15 44 15 19 15 56 19 3 21 1 44 73 29) #1# #2# 1064) #Y(si::bytecodes nil nil (15 57 15 3 15 58 15 59 19 4 6 15 57 14 7 77 15 60 19 4 6 15 57 1 63 12 19 2 18 15 57 15 19 15 64 19 3 21 1 57 73 29) #1# #2# 1221) #Y(si::bytecodes nil nil (15 65 15 3 15 66 15 67 19 4 6 15 65 14 7 77 15 68 19 4 6 15 65 34 89 12 14 55 9 1 19 4 18 15 65 15 19 15 90 19 3 21 1 65 73 29) #1# #2# 1410) #Y(si::bytecodes nil nil (15 91 15 3 15 92 15 93 19 4 6 15 91 14 7 77 15 94 19 4 6 15 91 1 115 12 14 55 9 2 19 4 18 15 91 15 19 15 116 19 3 21 1 91 73 29) #1# #2# 2853))
